##==============================================================================
## GLFW 3.0.1 Binding for Nimrod
## Author: Guillaume Viger
## Version: 2.0
##==============================================================================



{.deadCodeElim: on.}

when defined(windows):
    const LibName = "glfw.dll"
elif defined(macosx):
    const LibName = "libglfw.dylib"
else:
    const LibName = "libglfw.so"


##------------------------------------------------------------------------------
## CONSTANTS & TYPES
##------------------------------------------------------------------------------

## GLFW Version

const
    GLFW_VERSION_MAJOR* = 3'i8
    GLFW_VERSION_MINOR* = 0'i8
    GLFW_VERSION_REVISION* = 1'i8


## Input handling definitions
## -----------------------------------------------------------------------------

## Key and button state/action definitions
## GLFW 3 key tokens map to physical keys, unlike in GLFW 2 where they
## mapped to the values generated by the current keyboard layout.
## The tokens are named according to the values they would have using
## the standard US layout, but this is only a convenience, as most
## programmers are assumed to know that layout. This means that
## (for example) GLFW_KEY_LEFT_BRACKET is always a single key and is
## the same key in the same place regardless of what keyboard layouts
## the users of your program has.

const
    GLFW_RELEASE* = 0'i8
    GLFW_PRESS* = 1'i8
    GLFW_REPEAT* = 2'i8


    GLFW_KEY_UNKNOWN* = -1
    GLFW_KEY_SPACE* = 32
    GLFW_KEY_APOSTROPHE* = 39 # '
    GLFW_KEY_COMMA* = 44 # ,
    GLFW_KEY_MINUS* = 45 # -
    GLFW_KEY_PERIOD* = 46 # .
    GLFW_KEY_SLASH* = 47 # /
    GLFW_KEY_0* = 48
    GLFW_KEY_1* = 49
    GLFW_KEY_2* = 50
    GLFW_KEY_3* = 51
    GLFW_KEY_4* = 52
    GLFW_KEY_5* = 53
    GLFW_KEY_6* = 54
    GLFW_KEY_7* = 55
    GLFW_KEY_8* = 56
    GLFW_KEY_9* = 57
    GLFW_KEY_SEMICOLON* = 59 # ;
    GLFW_KEY_EQUAL* = 61 # =
    GLFW_KEY_A* = 65
    GLFW_KEY_B* = 66
    GLFW_KEY_C* = 67
    GLFW_KEY_D* = 68
    GLFW_KEY_E* = 69
    GLFW_KEY_F* = 70
    GLFW_KEY_G* = 71
    GLFW_KEY_H* = 72
    GLFW_KEY_I* = 73
    GLFW_KEY_J* = 74
    GLFW_KEY_K* = 75
    GLFW_KEY_L* = 76
    GLFW_KEY_M* = 77
    GLFW_KEY_N* = 78
    GLFW_KEY_O* = 79
    GLFW_KEY_P* = 80
    GLFW_KEY_Q* = 81
    GLFW_KEY_R* = 82
    GLFW_KEY_S* = 83
    GLFW_KEY_T* = 84
    GLFW_KEY_U* = 85
    GLFW_KEY_V* = 86
    GLFW_KEY_W* = 87
    GLFW_KEY_X* = 88
    GLFW_KEY_Y* = 89
    GLFW_KEY_Z* = 90
    GLFW_KEY_LEFT_BRACKET* = 91  # [
    GLFW_KEY_BACKSLASH* = 92  # \
    GLFW_KEY_RIGHT_BRACKET* = 93  # ]
    GLFW_KEY_GRAVE_ACCENT* = 96  # `
    GLFW_KEY_WORLD_1* = 161 # non-US  #1
    GLFW_KEY_WORLD_2* = 162 # non-US  #2
    GLFW_KEY_ESCAPE* = 256
    GLFW_KEY_ENTER* = 257
    GLFW_KEY_TAB* = 258
    GLFW_KEY_BACKSPACE* = 259
    GLFW_KEY_INSERT* = 260
    GLFW_KEY_DELETE* = 261
    GLFW_KEY_RIGHT* = 262
    GLFW_KEY_LEFT* = 263
    GLFW_KEY_DOWN* = 264
    GLFW_KEY_UP* = 265
    GLFW_KEY_PAGE_UP* = 266
    GLFW_KEY_PAGE_DOWN* = 267
    GLFW_KEY_HOME* = 268
    GLFW_KEY_END* = 269
    GLFW_KEY_CAPS_LOCK* = 280
    GLFW_KEY_SCROLL_LOCK* = 281
    GLFW_KEY_NUM_LOCK* = 282
    GLFW_KEY_PRINT_SCREEN* = 283
    GLFW_KEY_PAUSE* = 284
    GLFW_KEY_F1* = 290
    GLFW_KEY_F2* = 291
    GLFW_KEY_F3* = 292
    GLFW_KEY_F4* = 293
    GLFW_KEY_F5* = 294
    GLFW_KEY_F6* = 295
    GLFW_KEY_F7* = 296
    GLFW_KEY_F8* = 297
    GLFW_KEY_F9* = 298
    GLFW_KEY_F10* = 299
    GLFW_KEY_F11* = 300
    GLFW_KEY_F12* = 301
    GLFW_KEY_F13* = 302
    GLFW_KEY_F14* = 303
    GLFW_KEY_F15* = 304
    GLFW_KEY_F16* = 305
    GLFW_KEY_F17* = 306
    GLFW_KEY_F18* = 307
    GLFW_KEY_F19* = 308
    GLFW_KEY_F20* = 309
    GLFW_KEY_F21* = 310
    GLFW_KEY_F22* = 311
    GLFW_KEY_F23* = 312
    GLFW_KEY_F24* = 313
    GLFW_KEY_F25* = 314
    GLFW_KEY_KP_0* = 320
    GLFW_KEY_KP_1* = 321
    GLFW_KEY_KP_2* = 322
    GLFW_KEY_KP_3* = 323
    GLFW_KEY_KP_4* = 324
    GLFW_KEY_KP_5* = 325
    GLFW_KEY_KP_6* = 326
    GLFW_KEY_KP_7* = 327
    GLFW_KEY_KP_8* = 328
    GLFW_KEY_KP_9* = 329
    GLFW_KEY_KP_DECIMAL* = 330
    GLFW_KEY_KP_DIVIDE* = 331
    GLFW_KEY_KP_MULTIPLY* = 332
    GLFW_KEY_KP_SUBTRACT* = 333
    GLFW_KEY_KP_ADD* = 334
    GLFW_KEY_KP_ENTER* = 335
    GLFW_KEY_KP_EQUAL* = 336
    GLFW_KEY_LEFT_SHIFT* = 340
    GLFW_KEY_LEFT_CONTROL* = 341
    GLFW_KEY_LEFT_ALT* = 342
    GLFW_KEY_LEFT_SUPER* = 343
    GLFW_KEY_RIGHT_SHIFT* = 344
    GLFW_KEY_RIGHT_CONTROL* = 345
    GLFW_KEY_RIGHT_ALT* = 346
    GLFW_KEY_RIGHT_SUPER* = 347
    GLFW_KEY_MENU* = 348
    GLFW_KEY_LAST* = GLFW_KEY_MENU


## Mouse button definitions ----------------------------------------------------

const
    GLFW_MOUSE_BUTTON_1* = 0
    GLFW_MOUSE_BUTTON_2* = 1
    GLFW_MOUSE_BUTTON_3* = 2
    GLFW_MOUSE_BUTTON_4* = 3
    GLFW_MOUSE_BUTTON_5* = 4
    GLFW_MOUSE_BUTTON_6* = 5
const
    GLFW_MOUSE_BUTTON_7* = 6
    GLFW_MOUSE_BUTTON_8* = 7

## Mouse button aliases

const
    GLFW_MOUSE_BUTTON_LAST* =   GLFW_MOUSE_BUTTON_8
    GLFW_MOUSE_BUTTON_LEFT* =   GLFW_MOUSE_BUTTON_1
    GLFW_MOUSE_BUTTON_RIGHT* =  GLFW_MOUSE_BUTTON_2
    GLFW_MOUSE_BUTTON_MIDDLE* = GLFW_MOUSE_BUTTON_3


## Joystick identifiers --------------------------------------------------------

const
    GLFW_JOYSTICK_1* =         0
    GLFW_JOYSTICK_2* =         1
    GLFW_JOYSTICK_3* =         2
    GLFW_JOYSTICK_4* =         3
    GLFW_JOYSTICK_5* =         4
    GLFW_JOYSTICK_6* =         5
    GLFW_JOYSTICK_7* =         6
    GLFW_JOYSTICK_8* =         7
    GLFW_JOYSTICK_9* =         8
    GLFW_JOYSTICK_10* =        9
    GLFW_JOYSTICK_11* =        10
    GLFW_JOYSTICK_12* =        11
    GLFW_JOYSTICK_13* =        12
    GLFW_JOYSTICK_14* =        13
    GLFW_JOYSTICK_15* =        14
    GLFW_JOYSTICK_16* =        15
    GLFW_JOYSTICK_LAST* =      GLFW_JOYSTICK_16

## Other definitions -----------------------------------------------------------



const

    #glfwOpenWindow modes
    ## ------------------------------------------
    GLFW_WINDOW* =                  0x00010001
    GLFW_FULLSCREEN* =              0x00010002


    ## glfwGetWindowParam tokens
    ## ------------------------------------------

    GLFW_OPENED* =                  0x00020001
    GLFW_FOCUSED* =                 0x00020002
    GLFW_ICONIFIED* =               0x00020003
    GLFW_ACCELERATED* =             0x00020004
    GLFW_RED_BITS* =                0x00020005
    GLFW_GREEN_BITS* =              0x00020006
    GLFW_BLUE_BITS* =               0x00020007
    GLFW_ALPHA_BITS* =              0x00020008
    GLFW_DEPTH_BITS* =              0x00020009
    GLFW_STENCIL_BITS* =            0x0002000A


    ## The following constants are used for both glfwGetWindowParam
    ## and glfwWindowHint
    ## ------------------------------------------

    GLFW_REFRESH_RATE* =            0x0002000B
    GLFW_ACCUM_RED_BITS* =          0x0002000C
    GLFW_ACCUM_GREEN_BITS* =        0x0002000D
    GLFW_ACCUM_BLUE_BITS* =         0x0002000E
    GLFW_ACCUM_ALPHA_BITS* =        0x0002000F
    GLFW_AUX_BUFFERS* =             0x00020010
    GLFW_STEREO* =                  0x00020011
    GLFW_RESIZABLE* =               0x00020012
    GLFW_SAMPLES* =                 0x00020013
    GLFW_CONTEXT_VERSION_MAJOR* =   0x00020014
    GLFW_CONTEXT_VERSION_MINOR* =   0x00020015
    GLFW_OPENGL_FORWARD_COMPAT* =   0x00020016
    GLFW_OPENGL_DEBUG_CONTEXT* =    0x00020017
    GLFW_OPENGL_PROFILE* =          0x00020018

    ## GLFW_OPENGL_PROFILE tokens
    ## -----------------------------------------

    GLFW_OPENGL_CORE_PROFILE* =     0x00050001
    GLFW_OPENGL_COMPAT_PROFILE* =   0x00050002

    ## glfwEnable/glfwDisable tokens
    ## -----------------------------------------

    GLFW_CURSOR* =                  0x00030001
    GLFW_STICKY_KEYS* =             0x00030002
    GLFW_STICKY_MOUSE_BUTTONS* =    0x00030003
    GLFW_SYSTEM_KEYS* =             0x00030004
    GLFW_KEY_REPEAT* =              0x00030005
    GLFW_AUTO_POLL_EVENTS* =        0x00030006

    ## glfwJoystickPresent tokens
    ##  -----------------------------------------

    GLFW_PRESENT* =                 0x00050001
    GLFW_AXES* =                    0x00050002
    GLFW_BUTTONS* =                 0x00050003

    ## Time spans longer than this (seconds) are considered to be infinity
    GLFW_INFINITY* =                100000.0

    ## Error Codes
    ##  -----------------------------------------

    GLFW_NOT_INITIALIZED* =         0x00010001
    GLFW_NO_CURRENT_CONTEXT* =      0x00010002
    GLFW_INVALID_ENUM* =            0x00010003
    GLFW_INVALID_VALUE* =           0x00010004
    GLFW_OUT_OF_MEMORY* =           0x00010005
    GLFW_API_UNAVAILABLE* =         0x00010006
    GLFW_VERSION_UNAVAILABLE* =     0x00010007
    GLFW_PLATFORM_ERROR* =          0x00010008
    GLFW_FORMAT_UNAVAILABLE* =      0x00010009




## -----------------------------------------------------------------------------
## Typedefs
## -----------------------------------------------------------------------------

type

    PUChar* = ptr cchar
    PFloat* = ptr float

    ## Monitor handling

    PGlfwVidMode* = ptr TGlfwVidMode
    TGlfwVidMode*{.final.} = object
        width*: cint
        height*: cint
        redBits*: cint
        blueBits*: cint
        greenBits*: cint
        refreshRate*: cint

    PGlfwGammaRamp* = ptr TGlfwGammaRamp
    TGlfwGammaRamp*{.final.} = object
        width*: cint
        height*: cint
        redBits*: cint
        blueBits*: cint
        greenBits*: cint
        refreshRate*: cint

    PGlfwMonitor* = ptr TGlfwMonitor
    TGlfwMonitor*{.final.} = object
        width*: cint

    ## Image/texture information

    #PGlfwImage* = ptr TGlfwImage
    #TGlfwImage*{.final.} = object
    #    width*: cint
    #    height*: cint
    #    format*: cint
    #    bytesPerPixel*: cint
    #    data*: PUChar

    TGlfwCond* = Pointer

    PGlfwWindow* = Pointer
    PGlfwGlproc* = proc() {.cdecl.} #Hope that works
    #PGlfwGlproc* = Pointer #Or maybe this


## ----- CALLBACKS -------------------------------------------------------------


type

    TGlfwWindowPosCallback* = proc (window: PGlfwWindow, xpos: cint, ypos: cint){.cdecl.}
    TGlfwWindowSizeCallback* = proc (window: PGlfwWindow, width: cint, height: cint){.cdecl.}
    TGlfwWindowCloseCallback* = proc (window: PGlfwWindow) {.cdecl.}
    TGlfwWindowRefreshCallback* = proc (window: PGlfwWindow){.cdecl.}
    TGlfwWindowFocusCallback* = proc (window: PGlfwWindow, focused: cint){.cdecl.}
    TGlfwWindowIconifyCallback* = proc (window: PGlfwWindow, iconified: cint){.cdecl.}
    TGlfwFrameBufferSizeCallback* = proc (window: PGlfwWindow, width: cint, height: cint){.cdecl.}

    TGlfwMonitorCallback* = proc (monitor: PGlfwMonitor, xpos: cint){.cdecl.}

    TGlfwErrorCallback* = proc (error: cint, description: cstring){.cdecl.}

    TGlfwMouseButtonCallback* = proc (window: PGlfwWindow, button: cint, action: cint, mods: cint){.cdecl.}
    TGlfwCursorPosCallback* = proc (window: PGlfwWindow, xpos: cdouble, ypos: cdouble){.cdecl.}
    TGlfwCursorEnterCallback* = proc (window: PGlfwWindow, entered: cint){.cdecl.}
    TGlfwScrollCallback* = proc (window: PGlfwWindow, xoffset: cdouble, yoffset: cdouble){.cdecl.}
    TGlfwKeyCallback* = proc (window: PGlfwWindow, key: cint, scancode: cint, action: cint, mods: cint){.cdecl.}
    TGlfwCharCallback* = proc (window: PGlfwWindow, character: cint){.cdecl.}
    #unsigned int for above


## -----------------------------------------------------------------------------




## -----------------------------------------------------------------------------
## PROCEDURES
## -----------------------------------------------------------------------------

## Clipboard Support
## ----------------------------------------------------------------------------

proc glfwSetClipboardString*(window: PGlfwWindow, string: cstring) {.cdecl, importc: "glfwSetClipboardString", dynlib: LibName.}

proc glfwGetClipboardString*(window: PGlfwWindow): cstring {.cdecl, importc: "glfwGetClipboardString", dynlib: LibName.}




## Context Handling
## ----------------------------------------------------------------------------

proc glfwMakeContextCurrent*(window: PGlfwWindow) {.cdecl, importc: "glfwMakeContextCurrent", dynlib: LibName.}

proc glfwGetCurrentContext*(): PGlfwWindow {.cdecl, importc: "glfwGetCurrentContext", dynlib: LibName.}

proc glfwSwapBuffers*(window: PGlfwWindow) {.cdecl, importc: "glfwSwapBuffers", dynlib: LibName.}

proc glfwSwapInterval*(interval: cint) {.cdecl, importc: "glfwSwapInterval", dynlib: LibName.}

proc glfwExtensionSupported*(extension: cstring): cint {.cdecl, importc: "glfwExtensionSupported", dynlib: LibName.}

proc glfwGetProcAddress*(procname: PGlfwGlproc) {.cdecl, importc: "glfwGetProcAddress", dynlib: LibName.}




## Error Handling
## ----------------------------------------------------------------------------

proc glfwSetErrorCallback*(callback: TGlfwErrorCallback) {.cdecl, importc: "glfwSetErrorCallback", dynlib: LibName.}




## GLFW initialization, termination and version querying
## ----------------------------------------------------------------------------

proc glfwInit*(): cint{.cdecl, importc: "glfwInit", dynlib: LibName.}

proc glfwTerminate*(){.cdecl, importc: "glfwTerminate", dynlib: LibName.}

proc glfwGetVersion*(major: ptr cint, minor: ptr cint, rev: ptr cint){.cdecl, importc: "glfwGetVersion", dynlib: LibName.}

proc glfwGetVersionString*(): cstring {.cdecl, importc: "glfwGetVersionString", dynlib: LibName.}




## Window handling
## --------------------------------------------------------------------------
proc glfwDefaultWindowHints*(){.cdecl, importc: "glfwDefaultWindowHints", dynlib: LibName.}

proc glfwWindowHint*(target: cint, hint: cint){.cdecl, importc: "glfwWindowHint", dynlib: LibName.}

proc glfwCreateWindow*(width, height: cint, title: cstring, monitor: PGlfwMonitor, share: PGlfwWindow): PGlfwWindow {.cdecl, importc: "glfwCreateWindow", dynlib: LibName.}

proc glfwDestroyWindow*(window: PGlfwWindow) {.cdecl, importc: "glfwDestroyWindow", dynlib: LibName.}

proc glfwWindowShouldClose*(window: PGlfwWindow): cint {.cdecl, importc: "glfwWindowShouldClose", dynlib: LibName.}

proc glfwSetWindowShouldClose*(window: PGlfwWindow, value: cint) {.cdecl, importc: "glfwSetWindowShouldClose", dynlib: LibName.}

proc glfwSetWindowTitle*(window: PGlfwWindow, title: cstring) {.cdecl, importc: "glfwSetWindowTitle", dynlib: LibName.}

proc glfwGetWindowPos*(window: PGlfwWindow, xpos: ptr cint, ypos: ptr cint) {.cdecl, importc: "glfwGetWindowPos", dynlib: LibName.}

proc glfwSetWindowPos*(window: PGlfwWindow, xpos: cint, ypos: cint) {.cdecl, importc: "glfwSetWindowPos", dynlib: LibName.}

proc glfwGetWindowSize*(window: PGlfwWindow, width: ptr cint, height: ptr cint) {.cdecl, importc: "glfwGetWindowSize", dynlib: LibName.}

proc glfwSetWindowSize*(window: PGlfwWindow, width, height : cint) {.cdecl, importc: "glfwSetWindowSize", dynlib: LibName.}

proc glfwGetFramebufferSize*(window: PGlfwWindow, width: ptr cint, height: ptr cint) {.cdecl, importc: "glfwGetFramebufferSize", dynlib: LibName.}

proc glfwIconifyWindow*(window: PGlfwWindow) {.cdecl, importc: "glfwIconifyWindow", dynlib: LibName.}

proc glfwRestoreWindow*(window: PGlfwWindow) {.cdecl, importc: "glfwRestoreWindow", dynlib: LibName.}

proc glfwShowWindow*(window: PGlfwWindow) {.cdecl, importc: "glfwShowWindow", dynlib: LibName.}

proc glfwHideWindow*(window: PGlfwWindow) {.cdecl, importc: "glfwHideWindow", dynlib: LibName.}

proc glfwGetWindowMonitor*(window: PGlfwWindow): PGlfwMonitor {.cdecl, importc: "glfwGetWindowMonitor", dynlib: LibName.}

proc glfwGetWindowAttrib*(window: PGlfwWindow, attrib: cint): cint {.cdecl, importc: "glfwGetWindowAttrib", dynlib: LibName.}

# TO CHECK
#proc glfwSetWindowUserPointer*(window: PGlfwWindow, void *pointer) {.cdecl, importc: "glfwSetWindowUserPointer", dynlib: LibName.}

#proc glfwGetWindowUserPointer*(window: PGlfwWindow): void *pointer {.cdecl, importc: "glfwGetWindowUserPointer", dynlib: LibName.}

# Window/monitor related Callbacks

proc glfwSetWindowPosCallback*(window: PGlfwWindow, callback: TGlfwWindowPosCallback) {.cdecl, importc: "glfwSetWindowPosCallback", dynlib: LibName.}

proc glfwSetWindowSizeCallback*(window: PGlfwWindow, callback: TGlfwWindowSizeCallback) {.cdecl, importc: "glfwSetWindowSizeCallback", dynlib: LibName.}

proc glfwSetWindowCloseCallback*(window: PGlfwWindow, callback: TGlfwWindowCloseCallback) {.cdecl, importc: "glfwSetWindowCloseCallback", dynlib: LibName.}

proc glfwSetWindowRefreshCallback*(window: PGlfwWindow, callback: TGlfwWindowRefreshCallback) {.cdecl, importc: "glfwSetWindowRefreshCallback", dynlib: LibName.}

proc glfwSetWindowFocusCallback*(window: PGlfwWindow, callback: TGlfwWindowFocusCallback) {.cdecl, importc: "glfwSetWindowFocusCallback", dynlib: LibName.}

proc glfwSetWindowIconifyCallback*(window: PGlfwWindow, callback: TGlfwWindowIconifyCallback) {.cdecl, importc: "glfwSetWindowIconifyCallback", dynlib: LibName.}

proc glfwSetFramebufferSizeCallback*(window: PGlfwWindow, callback: TGlfwFrameBufferSizeCallback) {.cdecl, importc: "glfwSetFramebufferSizeCallback", dynlib: LibName.}




## Monitor Handling
## -----------------------------------------------------------------------------

#GLFWmonitor ** proc glfwGetMonitors* (count: ptr cint): PGlfwMonitor {.cdecl, importc: "glfwGetMonitors", dynlib: LibName.}

proc glfwGetPrimaryMonitor*(): PGlfwMonitor {.cdecl, importc: "glfwGetPrimaryMonitor", dynlib: LibName.}

proc glfwGetMonitorPos*(monitor: PGlfwMonitor, xpos: ptr cint, ypos: ptr cint) {.cdecl, importc: "glfwGetMonitorPos", dynlib: LibName.}

proc glfwGetMonitorPhysicalSize*(monitor: PGlfwMonitor, width: ptr cint, height: ptr cint) {.cdecl, importc: "glfwGetMonitorPhysicalSize", dynlib: LibName.}

proc glfwGetMonitorName*(monitor: PGlfwMonitor): cstring {.cdecl, importc: "glfwGetMonitorName", dynlib: LibName.}

proc glfwSetMonitorCallback*(callback: TGlfwMonitorCallback) {.cdecl, importc: "glfwSetMonitorCallback", dynlib: LibName.}

proc glfwGetVideoModes* (monitor: PGlfwMonitor, count: ptr cint): PGlfwVidMode {.cdecl, importc: "glfwGetVideoModes", dynlib: LibName.}

proc glfwGetVideoMode* (monitor: PGlfwMonitor): PGlfwVidMode {.cdecl, importc: "glfwGetVideoMode", dynlib: LibName.}

proc glfwSetGamma* (monitor: PGlfwMonitor, gamma: float) {.cdecl, importc: "glfwSetGamma", dynlib: LibName.}

proc glfwGetGammaRamp* (monitor: PGlfwMonitor): PGlfwGammaRamp {.cdecl, importc: "GLFWgammaramp", dynlib: LibName.}

proc glfwSetGammaRamp* (monitor: PGlfwMonitor, ramp: PGlfwGammaRamp) {.cdecl, importc: "glfwSetGammaRamp", dynlib: LibName.}




## Input handling
## ----------------------------------------------------------------------------

proc glfwPollEvents*() {.cdecl, importc: "glfwPollEvents", dynlib: LibName.}

proc glfwWaitEvents*() {.cdecl, importc: "glfwWaitEvents", dynlib: LibName.}

proc glfwGetInputMode*(window: PGlfwWindow, mode: cint): cint {.cdecl, importc: "glfwGetInputMode", dynlib: LibName.}

proc glfwSetInputMode*(window: PGlfwWindow, mode: cint, value: cint) {.cdecl, importc: "glfwSetInputMode", dynlib: LibName.}

proc glfwGetKey*(window: PGlfwWindow, key: cint): cint {.cdecl, importc: "glfwGetKey", dynlib: LibName.}

proc glfwGetMouseButton*(window: PGlfwWindow, button: cint): cint {.cdecl, importc: "glfwGetMouseButton", dynlib: LibName.}

proc glfwGetCursorPos*(window: PGlfwWindow, xpos: ptr cdouble, ypos: ptr cdouble) {.cdecl, importc: "glfwGetCursorPos", dynlib: LibName.}

proc glfwSetCursorPos*(window: PGlfwWindow, xpos: cdouble, ypos: cdouble) {.cdecl, importc: "glfwSetCursorPos", dynlib: LibName.}

proc glfwSetKeyCallback*(window: PGlfwWindow, callback: TGlfwKeyCallback) {.cdecl, importc: "glfwSetKeyCallback", dynlib: LibName.}

proc glfwSetCharCallback*(window: PGlfwWindow, callback: TGlfwCharCallback) {.cdecl, importc: "glfwSetCharCallback", dynlib: LibName.}

proc glfwSetMouseButtonCallback*(window: PGlfwWindow, callback: TGlfwMouseButtonCallback) {.cdecl, importc: "glfwSetMouseButtonCallback", dynlib: LibName.}

proc glfwSetCursorPosCallback*(window: PGlfwWindow, callback: TGlfwCursorPosCallback) {.cdecl, importc: "glfwSetCursorPosCallback", dynlib: LibName.}

proc glfwSetCursorEnterCallback*(window: PGlfwWindow, callback: TGlfwCursorEnterCallback) {.cdecl, importc: "glfwSetCursorEnterCallback", dynlib: LibName.}

proc glfwSetScrollCallback*(window: PGlfwWindow, callback: TGlfwScrollCallback) {.cdecl, importc: "glfwSetScrollCallback", dynlib: LibName.}

proc glfwJoystickPresent*(joy: cint): cint {.cdecl, importc: "glfwJoystickPresent", dynlib: LibName.}

proc glfwGetJoystickAxes*(joy: cint, count: ptr cint): PFloat {.cdecl, importc: "glfwGetJoystickAxes", dynlib: LibName.}

proc glfwGetJoystickButtons*(joy: cint, count: ptr cint): PUChar {.cdecl, importc: "glfwGetJoystickButtons", dynlib: LibName.}

proc glfwGetJoystickName*(joy: cint): cstring {.cdecl, importc: "glfwGetJoystickName", dynlib: LibName.}




## Time
## ---------------------------------------------------------------------------

proc glfwGetTime*(): cdouble {.cdecl, importc: "glfwGetTime", dynlib: LibName.}

proc glfwSetTime*(time: cdouble) {.cdecl, importc: "glfwSetTime", dynlib: LibName.}




## Extension support
## ---------------------------------------------------------------------------

proc glfwGetGLVersion*(major: ptr cint, minor: ptr cint, rev: ptr cint) {.cdecl, importc: "glfwGetGLVersion", dynlib: LibName.}




## Enable/disable functions
## ---------------------------------------------------------------------------

proc glfwEnable*(token: cint) {.cdecl, importc: "glfwEnable", dynlib: LibName.}

proc glfwDisable*(token: cint) {.cdecl, importc: "glfwDisable", dynlib: LibName.}

## ---------------------------------------------------------------------------